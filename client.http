@host = localhost
@port = 3010
@uriBase = http://{{host}}:{{port}}/v1
@uri = {{uriBase}}
@contentType = application/json

@userLoginUsername = admin
@userLoginPassword = 12345678
@userIdAdmin = efeed3eb-c0a2-4b3e-816f-2a42ca8451b3
@userJohnDoe = 520c2eb5-e83b-4ef5-a343-85756bcce149

// NOTE: watch out for expired token problems when we use `{{authLogIn`. or `{{authLogInLdap.`, check for dates in error
// NOTE: amother problem seem to use accessToken and both endpoints, to prevent this kind of rest client problems, never use same variables is both cases
// NOTE: check that user is not disabled
// {
//   "name": "TokenExpiredError",
//   "message": "jwt expired",
//   "expiredAt": "2020-10-20T14:31:36.000Z"
// }
// "jwt expired" comes from jsonwebtoken/verify.js

### authLogInLdap
// @name authLogInLdap

POST {{uri}}/auth/login HTTP/1.1
Content-Type: {{contentType}}

{
  // "username": "c3",
  // "password": "root"
  // "username": "mario",
  // "password": "root"
  "username": "user14",
  "password": "secret"
  // "username": "putz",
  // "password": "secret!!"
}

### authRefreshTokenLdap
// @name authRefreshTokenLdap

POST {{uri}}/auth/refresh-token HTTP/1.1
Content-Type: {{contentType}}

{
}

### authRevokeRefreshToken
// @name authRevokeRefreshToken

POST {{uri}}/auth/revoke-refresh-token HTTP/1.1
Content-Type: {{contentType}}

{
  // change user to revoke it'// s token, increment version
  "username":"mario"
}

### authLogOut
// @name authLogOut
@authToken = {{authLogInLdap.response.body.$.accessToken}}

POST {{uri}}/auth/logout HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
}

### ldapCreateUserRecord
// @name ldapCreateUserRecord
@authToken = {{authLogInLdap.response.body.$.accessToken}}

POST {{uri}}/ldap/user HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
  // "distinguishedName": "dn:CN=mario,CN=Users,DC=c3edu,DC=online",
  "username": "user14",
  "password": "secret",
  "firstName": "Nuno",
  "lastName": "Bento",
  "displayName": "Nuno Bento",
  "objectClass": "User",
  // "defaultGroup": "c3administrator",
  "defaultGroup": "c3student",
  // optional
  "mail":"nuno.bento@critical-links.com",
  "dateOfBirth": 19711219,
  "gender": "M",
  "telephoneNumber": "+351936202288",
  "studentID": "34273462836a"
}

### ldapChangeUserRecord
// @name ldapChangeUserRecord
@authToken = {{authLogInLdap.response.body.$.accessToken}}
@changeUsername = mario

PUT {{uri}}/ldap/user/{{changeUsername}} HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

// array of modifications, send one attribute only to prevent error `message:'Only one attribute per Change allowed'`
// you can pass in a single Change or an array of Change objects
{
  "changes": [
    {
      // replace, add, delete
      "operation": "replace",
      "modification": {
        "displayName": "Nuno Bento Changed 6"
      }
    },
    {
      "operation": "replace",
      "modification": {
        "mail": "nuno.bento@critical-links-changed6.com"
      }
    },
    {
      "operation": "replace",
      "modification": {
        "studentID": "studentID changed 6"
      }
    },
    {
      "operation": "replace",
      "modification": {
        "telephoneNumber": "telephoneNumber changed 6"
      }
    }
    // works
    // {
    //   "operation": "delete",
    //   "modification": {
    //     "mail": null
    //   }
    // }  
  ]
}

### ldapGetUserRecord: don't use cache, goes direct to ldap
// @name ldapGetUserRecord
@authToken = {{authLogInLdap.response.body.$.accessToken}}
@getUsername = user14

GET {{uri}}/ldap/user/{{getUsername}} HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
}

### lapAddMemberToGroup
// @name ldapAddMemberToGroup
@authToken = {{authLogInLdap.response.body.$.accessToken}}
@addMemberUsername = user14

POST {{uri}}/ldap/group/add HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
  "username": "{{addMemberUsername}}",
  // required to use in searchDn, get defaultGroup from "dn": "CN=user,OU=${defaultGroup},OU=People,DC=c3edu,DC=online"
  "defaultGroup" : "c3student",
  // add a member to group
  "group" : "c3teacher"
}

### ldapAddMemberToGroup
// @name ldapDeleteMemberToGroup
@authToken = {{authLogInLdap.response.body.$.accessToken}}
@addMemberUsername = user14

POST {{uri}}/ldap/group/delete HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
  "username": "{{addMemberUsername}}",
  // required to use in searchDn, get defaultGroup from "dn": "CN=user,OU=${defaultGroup},OU=People,DC=c3edu,DC=online"
  "defaultGroup" : "c3student",
  // add a member to group
  "group" : "c3teacher"  
}

### ldapDeleteUserRecord
// @name ldapDeleteUserRecord
@authToken = {{authLogInLdap.response.body.$.accessToken}}
@deleteUsername = root1

DELETE {{uri}}/ldap/user/{{deleteUsername}} HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
  // TODO
  "username": "{{addMemberUsername}}",
  // TODO
  // required to use in searchDn, get defaultGroup from "dn": "CN=user,OU=${defaultGroup},OU=People,DC=c3edu,DC=online"
  "defaultGroup" : "c3administrator",
}

### ldapInitUserRecordsCache
// @name ldapInitUserRecordsCache
@authToken = {{authLogInLdap.response.body.$.accessToken}}

POST {{uri}}/ldap/cache/init HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
}

### ldapGetUserRecords
// @name ldapGetUserRecords
@authToken = {{authLogInLdap.response.body.$.accessToken}}

POST {{uri}}/ldap/cache/search HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
  "page": 1,
  "perPage": 100,
  // optional
  "searchAttributes": [{
    // fields
    "username": {
      // must match string
      "exact": "nick6"
//      "exact": "mario",
      // must contain string
//      "includes": "mario",
      // must match regex, warn for escaped slashes
//      "regex": "\\b(\\w*mario\\w*)\\b"
    }
  },
  {
    "email": {
//      "exact": "mario@c3edu.online"
    }
  },
  {
    // special property, must search in memberOf array
    "memberOf": {
//      "exact": "CN=C3Administrator,OU=Groups,DC=c3edu,DC=online"
    }
  }]
}

### ldapGetUserProfileRecord: don't use cache, goes direct to ldap
// @name ldapGetUserProfileRecord
@authToken = {{authLogInLdap.response.body.$.accessToken}}

GET {{uri}}/ldap/profile HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
}

### ldapChangeUserProfileRecord
// @name ldapChangeUserProfileRecord
@authToken = {{authLogInLdap.response.body.$.accessToken}}

PUT {{uri}}/ldap/profile HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
  "changes": [
    {
      // replace, add, delete
      "operation": "replace",
      "modification": {
        "displayName": "Changed Display Name in Profile Endpoint...change2"
      }
    }
  ]
}

### ldapChangeUserProfilePassword
// @name ldapChangeUserProfilePassword
@authToken = {{authLogInLdap.response.body.$.accessToken}}

PUT {{uri}}/ldap/profile/password HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
  "oldPassword": "secret!",
  // newPassword must not be used in history, else
  // 0000052D: Constraint violation - check_password_restrictions: the password was already used (in history)!
  "newPassword": "secret!!"
}

### ldapGreeting WIP to be used to paginate

// @name ldapGreeting
@authToken = {{authLogInLdap.response.body.$.accessToken}}
@skip = 0
@take = 50
GET {{uri}}/ldap/{{skip}}/{{take}} HTTP/1.1
Authorization: Bearer {{authToken}}
