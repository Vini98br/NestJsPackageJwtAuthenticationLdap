@host = localhost
@port = 3010
@uriBase = http://{{host}}:{{port}}
@uri = {{uriBase}}
@contentType = application/json

@userLoginUsername = admin
@userLoginPassword = 12345678
@userIdAdmin = efeed3eb-c0a2-4b3e-816f-2a42ca8451b3
@userJohnDoe = 520c2eb5-e83b-4ef5-a343-85756bcce149

// NOTE: watch out for expired token problems when we use `{{authLogIn`. or `{{authLogInLdap.`, check for dates in error
// NOTE: amother problem seem to use accessToken and both endpoints, to prevent this kind of rest client problems, never use same variables is both cases
// NOTE: check that user is not disabled
// {
//   "name": "TokenExpiredError",
//   "message": "jwt expired",
//   "expiredAt": "2020-10-20T14:31:36.000Z"
// }

### authLogInLdap
// @name authLogInLdap

POST {{uri}}/auth/login HTTP/1.1
Content-Type: {{contentType}}

{
  "username": "mario",
  "password": "root"
}

### authRefreshTokenLdap
// @name authRefreshTokenLdap

POST {{uri}}/auth/refresh-token HTTP/1.1
Content-Type: {{contentType}}

{
}

### authRevokeRefreshToken
// @name authRevokeRefreshToken

POST {{uri}}/auth/revoke-refresh-token HTTP/1.1
Content-Type: {{contentType}}

{
  // change user to revoke it'// s token, increment version
  "username":"mario"
}

### authLogOut
// @name authLogOut
@authToken = {{authLogInLdap.response.body.$.accessToken}}

POST {{uri}}/auth/logout HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
}

### ldapCreateUserRecord
// @name ldapCreateUserRecord
@authToken = {{authLogInLdap.response.body.$.accessToken}}

POST {{uri}}/ldap/user HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
  // "distinguishedName": "dn:CN=mario,CN=Users,DC=c3edu,DC=online",
  "username": "putz",
  "password": "secret",
  "firstName": "Nuno",
  "lastName": "Bento",
  "displayName": "Nuno Bento",
  "objectClass": "User",
  // optional
  "mail":"nuno.bento@critical-links.com",
  "dateOfBirth": 19711219,
  "gender": "M",
  "telephoneNumber": "+351936202288",
  "studentID": "34273462836a"
}

### ldapGetUserRecord
// @name ldapGetUserRecord
@authToken = {{authLogInLdap.response.body.$.accessToken}}
@getUsername = putz

GET {{uri}}/ldap/user/{{getUsername}} HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
}

### ldapInitUserRecordsCache
// @name ldapInitUserRecordsCache
@authToken = {{authLogInLdap.response.body.$.accessToken}}

POST {{uri}}/ldap/cache/init HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
}

### ldapGetUserRecords
// @name ldapGetUserRecords
@authToken = {{authLogInLdap.response.body.$.accessToken}}

GET {{uri}}/ldap/user HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
}

### ldapAddMemberToGroup
// @name ldapAddMemberToGroup
@authToken = {{authLogInLdap.response.body.$.accessToken}}
@addMemberUsername = putz

POST {{uri}}/ldap/group/add-member HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
  // "distinguishedName": "dn:CN=mario,CN=Users,DC=c3edu,DC=online",
  "username": "{{addMemberUsername}}",
  "group" : "c3administrator"
}

### ldapDeleteUserRecord
// @name ldapDeleteUserRecord
@authToken = {{authLogInLdap.response.body.$.accessToken}}
@deleteUsername = putz

DELETE {{uri}}/ldap/user/{{deleteUsername}} HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
}

### ldapChangeUserRecord
// @name ldapChangeUserRecord
@authToken = {{authLogInLdap.response.body.$.accessToken}}
@changeUsername = putz

PUT {{uri}}/ldap/user/{{changeUsername}} HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

// array of modifications, send one attribute only to prevent error `message:'Only one attribute per Change allowed'`
// you can pass in a single Change or an array of Change objects
[
  {
    // replace, add, delete
    "operation": "replace",
    "modification": {
      "displayName": "Nuno Bento Changed 6"
    }
  },
  {
    "operation": "replace",
    "modification": {
      "mail": "nuno.bento@critical-links-changed6.com"
    }
  },
  {
    "operation": "replace",
    "modification": {
      "studentID": "studentID changed 6"
    }
  },
  {
    "operation": "replace",
    "modification": {
      "telephoneNumber": "telephoneNumber changed 6",
      "studentID": "studentID changed 6"
    }
  }
  // works
  // {
  //   "operation": "delete",
  //   "modification": {
  //     "mail": null
  //   }
  // }  
]

### ldapGreeting WIP to be used to paginate

// @name ldapGreeting
@authToken = {{authLogInLdap.response.body.$.accessToken}}
@skip = 0
@take = 50
GET {{uri}}/ldap/{{skip}}/{{take}} HTTP/1.1
Authorization: Bearer {{authToken}}

## NOTE bellow are old userService endpoints

// ### authLogIn
// // @name authLogIn
// 
// POST {{uri}}/auth/login HTTP/1.1
// Content-Type: {{contentType}}
// 
// {
//   "username": "admin", 
//   "password": "12345678"
// }

// ### authRefreshToken
// // @name authRefreshToken
// 
// POST {{uri}}/auth/refresh-token HTTP/1.1
// Content-Type: {{contentType}}
// 
// {
// }

### userFindAll  // @HttpCode(204)
// 
// // @name userFindAll
// @authToken = {{authLogIn.response.body.$.accessToken}}
// @skip = 0
// @take = 50
// GET {{uri}}/users/{{skip}}/{{take}} HTTP/1.1
// Authorization: Bearer {{authToken}}

### userFindById
// // @name userFindById
// @userId = {{userFindAll.response.body.$.[0].id}}
// @authToken = {{authLogIn.response.body.$.accessToken}}

// GET {{uri}}/users/{{userId}} HTTP/1.1
// Authorization: Bearer {{authToken}}

### userCreate
// // @name userCreate
// @authToken = {{authLogIn.response.body.$.accessToken}}

// POST {{uri}}/users HTTP/1.1
// Content-Type: {{contentType}}
// Authorization: Bearer {{authToken}}

// {
//   "username": "mario.monteiro",
//   "password": "secret",
//   "firstName": "Mário",
//   "lastName": "Monteiro",
//   "email":"mario.monteiro@critical-links.com"
// }

### userUpdate
// // @name userUpdate
// @userId = {{userFindAll.response.body.$.[0].id}}
// @authToken = {{authLogIn.response.body.$.accessToken}}

// PUT {{uri}}/users/{{userId}} HTTP/1.1
// Content-Type: {{contentType}}
// Authorization: Bearer {{authToken}}

// {
//   "firstName": "Alexandre",
//   "lastName": "Monteiro",
//   "email":"alexandre.monteiro@critical-links.com",
//   "metaData": { "key": "value"},
//   "roles": [ "USER","ADMIN" ]
// }

### userUpdatePassword
// // @name userUpdatePassword
// @authToken = {{authLogIn.response.body.$.accessToken}}
// @userId = {{userFindAll.response.body.$.[0].id}}

### userCreate
// // @name userCreate
// @authToken = {{authLogIn.response.body.$.accessToken}}

// POST {{uri}}/users HTTP/1.1
// Content-Type: {{contentType}}
// Authorization: Bearer {{authToken}}

// {
//   "username": "mario.monteiro",
//   "password": "secret",
//   "firstName": "Mário",
//   "lastName": "Monteiro",
//   "email":"mario.monteiro@critical-links.com"
// }

// PUT {{uri}}/users/{{userId}}/password HTTP/1.1
// Content-Type: {{contentType}}
// Authorization: Bearer {{authToken}}

// {
//   "password": "87654321"
// }

### userDelete
// // @name userDelete
// @authToken = {{authLogIn.response.body.$.accessToken}}
// @userId = {{userFindAll.response.body.$.[0].id}}

// DELETE {{uri}}/users/{{userId}} HTTP/1.1
// Authorization: Bearer {{authToken}}
